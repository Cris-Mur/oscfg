#!/usr/bin/env bash

if [ "$(id -u)" -ne 0 ]; then
    echo "$0: you must be run as root.";
    exit 1;
fi

usage="timezone_: Usage [Option] [zone/path] or [zone path...]"

help_msg="\ntimezone_: Usage [Option] [zone/path] or [zone path...]\n
    \tOptions:\n
    \t\t-h --help : Show help message\n
    \t\t-l --list : Show zoneinfo availables\n
    \t\t\t-l --list [Max depth] : find timezone\n
    \t\t-s --set : Show zoneinfo availables\n";

function help() {
    echo -e $help_msg;
}

zoneinfo="/usr/share/zoneinfo";

if [ ! -d "$zoneinfo" ]; then
    echo "zone info folder doesnt exist. $zoneinfo";
    exit 1;
fi

localtime="/etc/localtime"

function set_localtime() {
    local origin=$1;
    if [ ! -f $origin ]; then
        echo "Error, localtime doesnt exist."
        exit 1;
    fi
    if [ -f $localtime ]; then
        echo "Local time already set you want over write? (S/n)."
        read -p "> " answer;
        if [ $answer != 'S' ]; then
            exit 0;
        else
            rm -rf $localtime;
        fi 
    fi
    ln -sf "$origin" "$localtime"
    hwclock --systohc
    hwclock -v
    echo "now you RTC time is: $(hwclock -r)"
}

function list_dir() {
    directory=$1
    ls $directory;
}

function lists_zoneInfo() {
    local path=$1
    local level=$2
    local max_depth=$3
    local root=$(list_dir $path);
    folders=($root)
    for zone in "${folders[@]}"; do
        if [ "$level" -le "$max_depth" ]; then
            if [ -d "$path/$zone" ]; then
                let level++;
                lists_zoneInfo "$path/$zone" $level $max_depth
                let level--;
            fi
        fi

        if [ -f "$path/$zone" ]; then
            echo -e "$path\t\t$zone"
            continue;
        else
            if [ -d "$path/$zone" ]; then
                echo -e "$path/$zone\t..."
            fi
            continue;
        fi
    done
}


function joinpath() {
    local result=""
    local delimiter="/"
    
    for arg in "$@"; do
        if [ -z "$result" ]; then
            result="$arg"
        else
            result="${result%/}$delimiter${arg#/}"
        fi
    done
    
    echo "$result"
}

if  [ "$#" -lt 1 ] ||
    [ "$1" == "-h" ] ||
    [ "$1" == "--help" ]; then
    help;
    exit 0;
fi

if  [ "$#" -gt 0 ] && 
    [ "$#" -lt 10 ] &&
    [ "$1" == "-l" ] ||
    [ "$1" == "--list" ]; then
        if  [ "$#" -lt 2 ]; then
            lists_zoneInfo $zoneinfo 0 "-1";
            exit 0;
        fi
        max_depth=$2
        if  [ "$#" -gt 2 ] &&
            [ -z "${max_depth//[0-9]}" ]; then
            sizeArgs=$#
            allArgs=($@)
            zoneArgs=${allArgs[@]:2:sizeArgs}
            echo "zone Arguments $sizeArgs#: $zoneArgs "
            zone=$(joinpath $zoneArgs)
            echo "zone: $zone"
            lists_zoneInfo "$zoneinfo/$zone" 1 "$max_depth";
            exit 0;
        fi
        if  [ "$#" -lt 3 ]&&
            [ ! -z "${max_depth//[0-9]}" ]; then
            zone=$2
            max_depth=0
            lists_zoneInfo "$zoneinfo/$zone" 1 "$max_depth";
            exit 0;
        fi
fi

if  [ "$#" -gt 0 ] && 
    [ "$#" -lt 10 ] &&
    [ "$1" == "-s" ] ||
    [ "$1" == "--set" ]; then
        sizeArgs=$#
        allArgs=($@)
        zoneArgs=${allArgs[@]:1:sizeArgs}
        echo "zone Arguments $sizeArgs#: $zoneArgs "
        zone=$(joinpath $zoneArgs)
        echo "zone: $zone"
        set_localtime "$zoneinfo/$zone";
        exit 0;
fi

help;
exit 1;